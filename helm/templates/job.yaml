apiVersion: batch/v1
kind: Job
metadata:
  name: headscale-generate-token
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: headscale-token
      containers:
        - name: headscale-generate-token
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e
              
              echo "Waiting for headscale container to be Ready..."
              while [ -z "$CONTAINER_STATUS" ]; do
              CONTAINER_STATUS=$(kubectl get pod headplane-0 -n {{ .Release.Namespace }} -o=jsonpath="{.status.containerStatuses[?(@.name==\"headscale\")].state.running}")
                sleep 1
              done

              echo "Checking if API token needs to be generated..."
              if kubectl get secret headscale-api-token -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                CURRENT_TOKEN=$(kubectl get secret headscale-api-token -n {{ .Release.Namespace }} -o jsonpath='{.data.HEADPLANE_OIDC__HEADSCALE_API_KEY}' | base64 -d)
                echo "Current token value: '$CURRENT_TOKEN'"
                echo "Current token length: ${#CURRENT_TOKEN}"
                echo "Expected placeholder: 'placeholder-token-will-be-replaced-by-job'"
                echo "Expected length: 42"
                if [[ "$CURRENT_TOKEN" != "placeholder-token-will-be-replaced-by-job" ]]; then
                  echo "Real API token already exists. Skipping token generation."
                  exit 0
                else
                  echo "Placeholder token found. Generating real API token..."
                fi
              else
                echo "Secret not found. Generating API token..."
              fi

              echo "Generating Headscale API token..."
              TOKEN=$(kubectl -n {{ .Release.Namespace }} exec -i headplane-0 -c headscale -- headscale apikeys create -e 100y)

              if [ -z "$TOKEN" ]; then
                echo "Failed to retrieve API token"
                exit 1
              fi

              echo "Updating headscale-api-token secret with generated API token..."
              kubectl patch secret headscale-api-token -n {{ .Release.Namespace }} -p="{\"data\":{\"HEADPLANE_OIDC__HEADSCALE_API_KEY\":\"$(echo -n "$TOKEN" | base64)\"}}"
              
              echo "Successfully updated headscale-api-token secret with real API token"
